# coding: utf-8

"""
    Rush Analytics API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    Contact: support@rushanalytics.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WordstatResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'wordstat_keyword_result': 'list[WordstatResultWordstatKeywordResult]',
        'wordstat_search_volume_result': 'list[WordstatResultWordstatSearchVolumeResult]',
        'regionid': 'int'
    }

    attribute_map = {
        'wordstat_keyword_result': 'wordstatKeywordResult',
        'wordstat_search_volume_result': 'wordstatSearchVolumeResult',
        'regionid': 'regionid'
    }

    def __init__(self, wordstat_keyword_result=None, wordstat_search_volume_result=None, regionid=None):  # noqa: E501
        """WordstatResult - a model defined in Swagger"""  # noqa: E501
        self._wordstat_keyword_result = None
        self._wordstat_search_volume_result = None
        self._regionid = None
        self.discriminator = None
        if wordstat_keyword_result is not None:
            self.wordstat_keyword_result = wordstat_keyword_result
        if wordstat_search_volume_result is not None:
            self.wordstat_search_volume_result = wordstat_search_volume_result
        if regionid is not None:
            self.regionid = regionid

    @property
    def wordstat_keyword_result(self):
        """Gets the wordstat_keyword_result of this WordstatResult.  # noqa: E501


        :return: The wordstat_keyword_result of this WordstatResult.  # noqa: E501
        :rtype: list[WordstatResultWordstatKeywordResult]
        """
        return self._wordstat_keyword_result

    @wordstat_keyword_result.setter
    def wordstat_keyword_result(self, wordstat_keyword_result):
        """Sets the wordstat_keyword_result of this WordstatResult.


        :param wordstat_keyword_result: The wordstat_keyword_result of this WordstatResult.  # noqa: E501
        :type: list[WordstatResultWordstatKeywordResult]
        """

        self._wordstat_keyword_result = wordstat_keyword_result

    @property
    def wordstat_search_volume_result(self):
        """Gets the wordstat_search_volume_result of this WordstatResult.  # noqa: E501


        :return: The wordstat_search_volume_result of this WordstatResult.  # noqa: E501
        :rtype: list[WordstatResultWordstatSearchVolumeResult]
        """
        return self._wordstat_search_volume_result

    @wordstat_search_volume_result.setter
    def wordstat_search_volume_result(self, wordstat_search_volume_result):
        """Sets the wordstat_search_volume_result of this WordstatResult.


        :param wordstat_search_volume_result: The wordstat_search_volume_result of this WordstatResult.  # noqa: E501
        :type: list[WordstatResultWordstatSearchVolumeResult]
        """

        self._wordstat_search_volume_result = wordstat_search_volume_result

    @property
    def regionid(self):
        """Gets the regionid of this WordstatResult.  # noqa: E501


        :return: The regionid of this WordstatResult.  # noqa: E501
        :rtype: int
        """
        return self._regionid

    @regionid.setter
    def regionid(self, regionid):
        """Sets the regionid of this WordstatResult.


        :param regionid: The regionid of this WordstatResult.  # noqa: E501
        :type: int
        """

        self._regionid = regionid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WordstatResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WordstatResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
