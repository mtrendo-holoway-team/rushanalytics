# coding: utf-8

"""
    Rush Analytics API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    Contact: support@rushanalytics.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WordstatParameters(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'apikey': 'str',
        'name': 'str',
        'regionid': 'int',
        'projecttype': 'str',
        'pages': 'int',
        'normal': 'bool',
        'parenthesis': 'bool',
        'exclamation': 'bool',
        'wordorder': 'bool',
        'minimumwordstat': 'int',
        'keywords': 'list[str]',
        'stopwords': 'list[str]'
    }

    attribute_map = {
        'apikey': 'apikey',
        'name': 'name',
        'regionid': 'regionid',
        'projecttype': 'projecttype',
        'pages': 'pages',
        'normal': 'normal',
        'parenthesis': 'parenthesis',
        'exclamation': 'exclamation',
        'wordorder': 'wordorder',
        'minimumwordstat': 'minimumwordstat',
        'keywords': 'keywords',
        'stopwords': 'stopwords'
    }

    def __init__(self, apikey=None, name=None, regionid=None, projecttype=None, pages=None, normal=None, parenthesis=None, exclamation=None, wordorder=None, minimumwordstat=None, keywords=None, stopwords=None):  # noqa: E501
        """WordstatParameters - a model defined in Swagger"""  # noqa: E501
        self._apikey = None
        self._name = None
        self._regionid = None
        self._projecttype = None
        self._pages = None
        self._normal = None
        self._parenthesis = None
        self._exclamation = None
        self._wordorder = None
        self._minimumwordstat = None
        self._keywords = None
        self._stopwords = None
        self.discriminator = None
        if apikey is not None:
            self.apikey = apikey
        if name is not None:
            self.name = name
        if regionid is not None:
            self.regionid = regionid
        if projecttype is not None:
            self.projecttype = projecttype
        if pages is not None:
            self.pages = pages
        if normal is not None:
            self.normal = normal
        if parenthesis is not None:
            self.parenthesis = parenthesis
        if exclamation is not None:
            self.exclamation = exclamation
        if wordorder is not None:
            self.wordorder = wordorder
        if minimumwordstat is not None:
            self.minimumwordstat = minimumwordstat
        if keywords is not None:
            self.keywords = keywords
        if stopwords is not None:
            self.stopwords = stopwords

    @property
    def apikey(self):
        """Gets the apikey of this WordstatParameters.  # noqa: E501


        :return: The apikey of this WordstatParameters.  # noqa: E501
        :rtype: str
        """
        return self._apikey

    @apikey.setter
    def apikey(self, apikey):
        """Sets the apikey of this WordstatParameters.


        :param apikey: The apikey of this WordstatParameters.  # noqa: E501
        :type: str
        """

        self._apikey = apikey

    @property
    def name(self):
        """Gets the name of this WordstatParameters.  # noqa: E501


        :return: The name of this WordstatParameters.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WordstatParameters.


        :param name: The name of this WordstatParameters.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def regionid(self):
        """Gets the regionid of this WordstatParameters.  # noqa: E501


        :return: The regionid of this WordstatParameters.  # noqa: E501
        :rtype: int
        """
        return self._regionid

    @regionid.setter
    def regionid(self, regionid):
        """Sets the regionid of this WordstatParameters.


        :param regionid: The regionid of this WordstatParameters.  # noqa: E501
        :type: int
        """

        self._regionid = regionid

    @property
    def projecttype(self):
        """Gets the projecttype of this WordstatParameters.  # noqa: E501


        :return: The projecttype of this WordstatParameters.  # noqa: E501
        :rtype: str
        """
        return self._projecttype

    @projecttype.setter
    def projecttype(self, projecttype):
        """Sets the projecttype of this WordstatParameters.


        :param projecttype: The projecttype of this WordstatParameters.  # noqa: E501
        :type: str
        """

        self._projecttype = projecttype

    @property
    def pages(self):
        """Gets the pages of this WordstatParameters.  # noqa: E501


        :return: The pages of this WordstatParameters.  # noqa: E501
        :rtype: int
        """
        return self._pages

    @pages.setter
    def pages(self, pages):
        """Sets the pages of this WordstatParameters.


        :param pages: The pages of this WordstatParameters.  # noqa: E501
        :type: int
        """

        self._pages = pages

    @property
    def normal(self):
        """Gets the normal of this WordstatParameters.  # noqa: E501


        :return: The normal of this WordstatParameters.  # noqa: E501
        :rtype: bool
        """
        return self._normal

    @normal.setter
    def normal(self, normal):
        """Sets the normal of this WordstatParameters.


        :param normal: The normal of this WordstatParameters.  # noqa: E501
        :type: bool
        """

        self._normal = normal

    @property
    def parenthesis(self):
        """Gets the parenthesis of this WordstatParameters.  # noqa: E501


        :return: The parenthesis of this WordstatParameters.  # noqa: E501
        :rtype: bool
        """
        return self._parenthesis

    @parenthesis.setter
    def parenthesis(self, parenthesis):
        """Sets the parenthesis of this WordstatParameters.


        :param parenthesis: The parenthesis of this WordstatParameters.  # noqa: E501
        :type: bool
        """

        self._parenthesis = parenthesis

    @property
    def exclamation(self):
        """Gets the exclamation of this WordstatParameters.  # noqa: E501


        :return: The exclamation of this WordstatParameters.  # noqa: E501
        :rtype: bool
        """
        return self._exclamation

    @exclamation.setter
    def exclamation(self, exclamation):
        """Sets the exclamation of this WordstatParameters.


        :param exclamation: The exclamation of this WordstatParameters.  # noqa: E501
        :type: bool
        """

        self._exclamation = exclamation

    @property
    def wordorder(self):
        """Gets the wordorder of this WordstatParameters.  # noqa: E501


        :return: The wordorder of this WordstatParameters.  # noqa: E501
        :rtype: bool
        """
        return self._wordorder

    @wordorder.setter
    def wordorder(self, wordorder):
        """Sets the wordorder of this WordstatParameters.


        :param wordorder: The wordorder of this WordstatParameters.  # noqa: E501
        :type: bool
        """

        self._wordorder = wordorder

    @property
    def minimumwordstat(self):
        """Gets the minimumwordstat of this WordstatParameters.  # noqa: E501


        :return: The minimumwordstat of this WordstatParameters.  # noqa: E501
        :rtype: int
        """
        return self._minimumwordstat

    @minimumwordstat.setter
    def minimumwordstat(self, minimumwordstat):
        """Sets the minimumwordstat of this WordstatParameters.


        :param minimumwordstat: The minimumwordstat of this WordstatParameters.  # noqa: E501
        :type: int
        """

        self._minimumwordstat = minimumwordstat

    @property
    def keywords(self):
        """Gets the keywords of this WordstatParameters.  # noqa: E501


        :return: The keywords of this WordstatParameters.  # noqa: E501
        :rtype: list[str]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this WordstatParameters.


        :param keywords: The keywords of this WordstatParameters.  # noqa: E501
        :type: list[str]
        """

        self._keywords = keywords

    @property
    def stopwords(self):
        """Gets the stopwords of this WordstatParameters.  # noqa: E501


        :return: The stopwords of this WordstatParameters.  # noqa: E501
        :rtype: list[str]
        """
        return self._stopwords

    @stopwords.setter
    def stopwords(self, stopwords):
        """Sets the stopwords of this WordstatParameters.


        :param stopwords: The stopwords of this WordstatParameters.  # noqa: E501
        :type: list[str]
        """

        self._stopwords = stopwords

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WordstatParameters, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WordstatParameters):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
