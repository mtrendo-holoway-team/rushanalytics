# coding: utf-8

"""
    Rush Analytics API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    Contact: support@rushanalytics.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateRpp(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'apikey': 'str',
        'name': 'str',
        'url': 'str',
        'competitors': 'list[str]',
        'data_collection_frequency': 'CreateRppDataCollectionFrequency',
        'yandex_regions': 'list[FppRegion]',
        'google_regions': 'list[FppRegion]',
        'keywords': 'list[RppKeyword]'
    }

    attribute_map = {
        'apikey': 'apikey',
        'name': 'name',
        'url': 'url',
        'competitors': 'competitors',
        'data_collection_frequency': 'dataCollectionFrequency',
        'yandex_regions': 'yandexRegions',
        'google_regions': 'googleRegions',
        'keywords': 'keywords'
    }

    def __init__(self, apikey=None, name=None, url=None, competitors=None, data_collection_frequency=None, yandex_regions=None, google_regions=None, keywords=None):  # noqa: E501
        """CreateRpp - a model defined in Swagger"""  # noqa: E501
        self._apikey = None
        self._name = None
        self._url = None
        self._competitors = None
        self._data_collection_frequency = None
        self._yandex_regions = None
        self._google_regions = None
        self._keywords = None
        self.discriminator = None
        if apikey is not None:
            self.apikey = apikey
        if name is not None:
            self.name = name
        if url is not None:
            self.url = url
        if competitors is not None:
            self.competitors = competitors
        if data_collection_frequency is not None:
            self.data_collection_frequency = data_collection_frequency
        if yandex_regions is not None:
            self.yandex_regions = yandex_regions
        if google_regions is not None:
            self.google_regions = google_regions
        if keywords is not None:
            self.keywords = keywords

    @property
    def apikey(self):
        """Gets the apikey of this CreateRpp.  # noqa: E501


        :return: The apikey of this CreateRpp.  # noqa: E501
        :rtype: str
        """
        return self._apikey

    @apikey.setter
    def apikey(self, apikey):
        """Sets the apikey of this CreateRpp.


        :param apikey: The apikey of this CreateRpp.  # noqa: E501
        :type: str
        """

        self._apikey = apikey

    @property
    def name(self):
        """Gets the name of this CreateRpp.  # noqa: E501


        :return: The name of this CreateRpp.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateRpp.


        :param name: The name of this CreateRpp.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def url(self):
        """Gets the url of this CreateRpp.  # noqa: E501


        :return: The url of this CreateRpp.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this CreateRpp.


        :param url: The url of this CreateRpp.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def competitors(self):
        """Gets the competitors of this CreateRpp.  # noqa: E501


        :return: The competitors of this CreateRpp.  # noqa: E501
        :rtype: list[str]
        """
        return self._competitors

    @competitors.setter
    def competitors(self, competitors):
        """Sets the competitors of this CreateRpp.


        :param competitors: The competitors of this CreateRpp.  # noqa: E501
        :type: list[str]
        """

        self._competitors = competitors

    @property
    def data_collection_frequency(self):
        """Gets the data_collection_frequency of this CreateRpp.  # noqa: E501


        :return: The data_collection_frequency of this CreateRpp.  # noqa: E501
        :rtype: CreateRppDataCollectionFrequency
        """
        return self._data_collection_frequency

    @data_collection_frequency.setter
    def data_collection_frequency(self, data_collection_frequency):
        """Sets the data_collection_frequency of this CreateRpp.


        :param data_collection_frequency: The data_collection_frequency of this CreateRpp.  # noqa: E501
        :type: CreateRppDataCollectionFrequency
        """

        self._data_collection_frequency = data_collection_frequency

    @property
    def yandex_regions(self):
        """Gets the yandex_regions of this CreateRpp.  # noqa: E501


        :return: The yandex_regions of this CreateRpp.  # noqa: E501
        :rtype: list[FppRegion]
        """
        return self._yandex_regions

    @yandex_regions.setter
    def yandex_regions(self, yandex_regions):
        """Sets the yandex_regions of this CreateRpp.


        :param yandex_regions: The yandex_regions of this CreateRpp.  # noqa: E501
        :type: list[FppRegion]
        """

        self._yandex_regions = yandex_regions

    @property
    def google_regions(self):
        """Gets the google_regions of this CreateRpp.  # noqa: E501


        :return: The google_regions of this CreateRpp.  # noqa: E501
        :rtype: list[FppRegion]
        """
        return self._google_regions

    @google_regions.setter
    def google_regions(self, google_regions):
        """Sets the google_regions of this CreateRpp.


        :param google_regions: The google_regions of this CreateRpp.  # noqa: E501
        :type: list[FppRegion]
        """

        self._google_regions = google_regions

    @property
    def keywords(self):
        """Gets the keywords of this CreateRpp.  # noqa: E501


        :return: The keywords of this CreateRpp.  # noqa: E501
        :rtype: list[RppKeyword]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this CreateRpp.


        :param keywords: The keywords of this CreateRpp.  # noqa: E501
        :type: list[RppKeyword]
        """

        self._keywords = keywords

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateRpp, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateRpp):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
