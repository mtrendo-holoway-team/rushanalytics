# coding: utf-8

"""
    Rush Analytics API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    Contact: support@rushanalytics.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Top10Result(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'regionid': 'int',
        'keywords': 'list[Top10Keyword]',
        'leading_domains': 'Top10LeadingDomains'
    }

    attribute_map = {
        'regionid': 'regionid',
        'keywords': 'keywords',
        'leading_domains': 'leadingDomains'
    }

    def __init__(self, regionid=None, keywords=None, leading_domains=None):  # noqa: E501
        """Top10Result - a model defined in Swagger"""  # noqa: E501
        self._regionid = None
        self._keywords = None
        self._leading_domains = None
        self.discriminator = None
        if regionid is not None:
            self.regionid = regionid
        if keywords is not None:
            self.keywords = keywords
        if leading_domains is not None:
            self.leading_domains = leading_domains

    @property
    def regionid(self):
        """Gets the regionid of this Top10Result.  # noqa: E501


        :return: The regionid of this Top10Result.  # noqa: E501
        :rtype: int
        """
        return self._regionid

    @regionid.setter
    def regionid(self, regionid):
        """Sets the regionid of this Top10Result.


        :param regionid: The regionid of this Top10Result.  # noqa: E501
        :type: int
        """

        self._regionid = regionid

    @property
    def keywords(self):
        """Gets the keywords of this Top10Result.  # noqa: E501


        :return: The keywords of this Top10Result.  # noqa: E501
        :rtype: list[Top10Keyword]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this Top10Result.


        :param keywords: The keywords of this Top10Result.  # noqa: E501
        :type: list[Top10Keyword]
        """

        self._keywords = keywords

    @property
    def leading_domains(self):
        """Gets the leading_domains of this Top10Result.  # noqa: E501


        :return: The leading_domains of this Top10Result.  # noqa: E501
        :rtype: Top10LeadingDomains
        """
        return self._leading_domains

    @leading_domains.setter
    def leading_domains(self, leading_domains):
        """Sets the leading_domains of this Top10Result.


        :param leading_domains: The leading_domains of this Top10Result.  # noqa: E501
        :type: Top10LeadingDomains
        """

        self._leading_domains = leading_domains

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Top10Result, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Top10Result):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
