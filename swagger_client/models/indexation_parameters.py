# coding: utf-8

"""
    Rush Analytics API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    Contact: support@rushanalytics.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IndexationParameters(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'apikey': 'str',
        'name': 'str',
        'urls': 'list[str]',
        'search_engines': 'list[str]',
        'google_country': 'str',
        'google_language': 'str'
    }

    attribute_map = {
        'apikey': 'apikey',
        'name': 'name',
        'urls': 'urls',
        'search_engines': 'searchEngines',
        'google_country': 'googleCountry',
        'google_language': 'googleLanguage'
    }

    def __init__(self, apikey=None, name=None, urls=None, search_engines=None, google_country=None, google_language=None):  # noqa: E501
        """IndexationParameters - a model defined in Swagger"""  # noqa: E501
        self._apikey = None
        self._name = None
        self._urls = None
        self._search_engines = None
        self._google_country = None
        self._google_language = None
        self.discriminator = None
        if apikey is not None:
            self.apikey = apikey
        if name is not None:
            self.name = name
        if urls is not None:
            self.urls = urls
        if search_engines is not None:
            self.search_engines = search_engines
        if google_country is not None:
            self.google_country = google_country
        if google_language is not None:
            self.google_language = google_language

    @property
    def apikey(self):
        """Gets the apikey of this IndexationParameters.  # noqa: E501


        :return: The apikey of this IndexationParameters.  # noqa: E501
        :rtype: str
        """
        return self._apikey

    @apikey.setter
    def apikey(self, apikey):
        """Sets the apikey of this IndexationParameters.


        :param apikey: The apikey of this IndexationParameters.  # noqa: E501
        :type: str
        """

        self._apikey = apikey

    @property
    def name(self):
        """Gets the name of this IndexationParameters.  # noqa: E501


        :return: The name of this IndexationParameters.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IndexationParameters.


        :param name: The name of this IndexationParameters.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def urls(self):
        """Gets the urls of this IndexationParameters.  # noqa: E501


        :return: The urls of this IndexationParameters.  # noqa: E501
        :rtype: list[str]
        """
        return self._urls

    @urls.setter
    def urls(self, urls):
        """Sets the urls of this IndexationParameters.


        :param urls: The urls of this IndexationParameters.  # noqa: E501
        :type: list[str]
        """

        self._urls = urls

    @property
    def search_engines(self):
        """Gets the search_engines of this IndexationParameters.  # noqa: E501


        :return: The search_engines of this IndexationParameters.  # noqa: E501
        :rtype: list[str]
        """
        return self._search_engines

    @search_engines.setter
    def search_engines(self, search_engines):
        """Sets the search_engines of this IndexationParameters.


        :param search_engines: The search_engines of this IndexationParameters.  # noqa: E501
        :type: list[str]
        """

        self._search_engines = search_engines

    @property
    def google_country(self):
        """Gets the google_country of this IndexationParameters.  # noqa: E501


        :return: The google_country of this IndexationParameters.  # noqa: E501
        :rtype: str
        """
        return self._google_country

    @google_country.setter
    def google_country(self, google_country):
        """Sets the google_country of this IndexationParameters.


        :param google_country: The google_country of this IndexationParameters.  # noqa: E501
        :type: str
        """

        self._google_country = google_country

    @property
    def google_language(self):
        """Gets the google_language of this IndexationParameters.  # noqa: E501


        :return: The google_language of this IndexationParameters.  # noqa: E501
        :rtype: str
        """
        return self._google_language

    @google_language.setter
    def google_language(self, google_language):
        """Sets the google_language of this IndexationParameters.


        :param google_language: The google_language of this IndexationParameters.  # noqa: E501
        :type: str
        """

        self._google_language = google_language

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IndexationParameters, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IndexationParameters):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
