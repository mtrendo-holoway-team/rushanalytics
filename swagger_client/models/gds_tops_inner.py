# coding: utf-8

"""
    Rush Analytics API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    Contact: support@rushanalytics.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GdsTopsInner(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_date': 'str',
        'top3': 'float',
        'top5': 'float',
        'top10': 'float',
        'top30': 'float',
        'top100': 'float'
    }

    attribute_map = {
        '_date': 'date',
        'top3': 'top3',
        'top5': 'top5',
        'top10': 'top10',
        'top30': 'top30',
        'top100': 'top100'
    }

    def __init__(self, _date=None, top3=None, top5=None, top10=None, top30=None, top100=None):  # noqa: E501
        """GdsTopsInner - a model defined in Swagger"""  # noqa: E501
        self.__date = None
        self._top3 = None
        self._top5 = None
        self._top10 = None
        self._top30 = None
        self._top100 = None
        self.discriminator = None
        if _date is not None:
            self._date = _date
        if top3 is not None:
            self.top3 = top3
        if top5 is not None:
            self.top5 = top5
        if top10 is not None:
            self.top10 = top10
        if top30 is not None:
            self.top30 = top30
        if top100 is not None:
            self.top100 = top100

    @property
    def _date(self):
        """Gets the _date of this GdsTopsInner.  # noqa: E501


        :return: The _date of this GdsTopsInner.  # noqa: E501
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this GdsTopsInner.


        :param _date: The _date of this GdsTopsInner.  # noqa: E501
        :type: str
        """

        self.__date = _date

    @property
    def top3(self):
        """Gets the top3 of this GdsTopsInner.  # noqa: E501


        :return: The top3 of this GdsTopsInner.  # noqa: E501
        :rtype: float
        """
        return self._top3

    @top3.setter
    def top3(self, top3):
        """Sets the top3 of this GdsTopsInner.


        :param top3: The top3 of this GdsTopsInner.  # noqa: E501
        :type: float
        """

        self._top3 = top3

    @property
    def top5(self):
        """Gets the top5 of this GdsTopsInner.  # noqa: E501


        :return: The top5 of this GdsTopsInner.  # noqa: E501
        :rtype: float
        """
        return self._top5

    @top5.setter
    def top5(self, top5):
        """Sets the top5 of this GdsTopsInner.


        :param top5: The top5 of this GdsTopsInner.  # noqa: E501
        :type: float
        """

        self._top5 = top5

    @property
    def top10(self):
        """Gets the top10 of this GdsTopsInner.  # noqa: E501


        :return: The top10 of this GdsTopsInner.  # noqa: E501
        :rtype: float
        """
        return self._top10

    @top10.setter
    def top10(self, top10):
        """Sets the top10 of this GdsTopsInner.


        :param top10: The top10 of this GdsTopsInner.  # noqa: E501
        :type: float
        """

        self._top10 = top10

    @property
    def top30(self):
        """Gets the top30 of this GdsTopsInner.  # noqa: E501


        :return: The top30 of this GdsTopsInner.  # noqa: E501
        :rtype: float
        """
        return self._top30

    @top30.setter
    def top30(self, top30):
        """Sets the top30 of this GdsTopsInner.


        :param top30: The top30 of this GdsTopsInner.  # noqa: E501
        :type: float
        """

        self._top30 = top30

    @property
    def top100(self):
        """Gets the top100 of this GdsTopsInner.  # noqa: E501


        :return: The top100 of this GdsTopsInner.  # noqa: E501
        :rtype: float
        """
        return self._top100

    @top100.setter
    def top100(self, top100):
        """Sets the top100 of this GdsTopsInner.


        :param top100: The top100 of this GdsTopsInner.  # noqa: E501
        :type: float
        """

        self._top100 = top100

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GdsTopsInner, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GdsTopsInner):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
