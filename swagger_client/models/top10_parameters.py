# coding: utf-8

"""
    Rush Analytics API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    Contact: support@rushanalytics.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Top10Parameters(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'apikey': 'str',
        'name': 'str',
        'depth': 'int',
        'search_engine': 'str',
        'region': 'Region',
        'keywords': 'list[str]'
    }

    attribute_map = {
        'apikey': 'apikey',
        'name': 'name',
        'depth': 'depth',
        'search_engine': 'searchEngine',
        'region': 'region',
        'keywords': 'keywords'
    }

    def __init__(self, apikey=None, name=None, depth=None, search_engine=None, region=None, keywords=None):  # noqa: E501
        """Top10Parameters - a model defined in Swagger"""  # noqa: E501
        self._apikey = None
        self._name = None
        self._depth = None
        self._search_engine = None
        self._region = None
        self._keywords = None
        self.discriminator = None
        if apikey is not None:
            self.apikey = apikey
        if name is not None:
            self.name = name
        if depth is not None:
            self.depth = depth
        if search_engine is not None:
            self.search_engine = search_engine
        if region is not None:
            self.region = region
        if keywords is not None:
            self.keywords = keywords

    @property
    def apikey(self):
        """Gets the apikey of this Top10Parameters.  # noqa: E501


        :return: The apikey of this Top10Parameters.  # noqa: E501
        :rtype: str
        """
        return self._apikey

    @apikey.setter
    def apikey(self, apikey):
        """Sets the apikey of this Top10Parameters.


        :param apikey: The apikey of this Top10Parameters.  # noqa: E501
        :type: str
        """

        self._apikey = apikey

    @property
    def name(self):
        """Gets the name of this Top10Parameters.  # noqa: E501


        :return: The name of this Top10Parameters.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Top10Parameters.


        :param name: The name of this Top10Parameters.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def depth(self):
        """Gets the depth of this Top10Parameters.  # noqa: E501


        :return: The depth of this Top10Parameters.  # noqa: E501
        :rtype: int
        """
        return self._depth

    @depth.setter
    def depth(self, depth):
        """Sets the depth of this Top10Parameters.


        :param depth: The depth of this Top10Parameters.  # noqa: E501
        :type: int
        """

        self._depth = depth

    @property
    def search_engine(self):
        """Gets the search_engine of this Top10Parameters.  # noqa: E501


        :return: The search_engine of this Top10Parameters.  # noqa: E501
        :rtype: str
        """
        return self._search_engine

    @search_engine.setter
    def search_engine(self, search_engine):
        """Sets the search_engine of this Top10Parameters.


        :param search_engine: The search_engine of this Top10Parameters.  # noqa: E501
        :type: str
        """

        self._search_engine = search_engine

    @property
    def region(self):
        """Gets the region of this Top10Parameters.  # noqa: E501


        :return: The region of this Top10Parameters.  # noqa: E501
        :rtype: Region
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this Top10Parameters.


        :param region: The region of this Top10Parameters.  # noqa: E501
        :type: Region
        """

        self._region = region

    @property
    def keywords(self):
        """Gets the keywords of this Top10Parameters.  # noqa: E501


        :return: The keywords of this Top10Parameters.  # noqa: E501
        :rtype: list[str]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this Top10Parameters.


        :param keywords: The keywords of this Top10Parameters.  # noqa: E501
        :type: list[str]
        """

        self._keywords = keywords

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Top10Parameters, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Top10Parameters):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
