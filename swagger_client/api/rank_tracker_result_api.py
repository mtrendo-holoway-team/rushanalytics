# coding: utf-8

"""
    Rush Analytics API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    Contact: support@rushanalytics.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class RankTrackerResultApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_regions_list(self, projectid, page, apikey, **kwargs):  # noqa: E501
        """Get regions list of your Rank Tracker project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_regions_list(projectid, page, apikey, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int projectid: Project ID as returned by /create endpoint (required)
        :param int page: Page of results (required)
        :param str apikey: Your api key (required)
        :return: RppRegionsList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_regions_list_with_http_info(projectid, page, apikey, **kwargs)  # noqa: E501
        else:
            (data) = self.get_regions_list_with_http_info(projectid, page, apikey, **kwargs)  # noqa: E501
            return data

    def get_regions_list_with_http_info(self, projectid, page, apikey, **kwargs):  # noqa: E501
        """Get regions list of your Rank Tracker project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_regions_list_with_http_info(projectid, page, apikey, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int projectid: Project ID as returned by /create endpoint (required)
        :param int page: Page of results (required)
        :param str apikey: Your api key (required)
        :return: RppRegionsList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['projectid', 'page', 'apikey']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_regions_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'projectid' is set
        if ('projectid' not in params or
                params['projectid'] is None):
            raise ValueError("Missing the required parameter `projectid` when calling `get_regions_list`")  # noqa: E501
        # verify the required parameter 'page' is set
        if ('page' not in params or
                params['page'] is None):
            raise ValueError("Missing the required parameter `page` when calling `get_regions_list`")  # noqa: E501
        # verify the required parameter 'apikey' is set
        if ('apikey' not in params or
                params['apikey'] is None):
            raise ValueError("Missing the required parameter `apikey` when calling `get_regions_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in params:
            path_params['projectid'] = params['projectid']  # noqa: E501
        if 'page' in params:
            path_params['page'] = params['page']  # noqa: E501

        query_params = []
        if 'apikey' in params:
            query_params.append(('apikey', params['apikey']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/result/ranktracker/regions/{projectid}/{page}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RppRegionsList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_rpp_competitors_list(self, projectid, page, apikey, **kwargs):  # noqa: E501
        """Get Competitors list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_rpp_competitors_list(projectid, page, apikey, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int projectid: Project ID as returned by /create endpoint (required)
        :param int page: Page of results (required)
        :param str apikey: Your api key (required)
        :return: RppCompetitorsList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_rpp_competitors_list_with_http_info(projectid, page, apikey, **kwargs)  # noqa: E501
        else:
            (data) = self.get_rpp_competitors_list_with_http_info(projectid, page, apikey, **kwargs)  # noqa: E501
            return data

    def get_rpp_competitors_list_with_http_info(self, projectid, page, apikey, **kwargs):  # noqa: E501
        """Get Competitors list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_rpp_competitors_list_with_http_info(projectid, page, apikey, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int projectid: Project ID as returned by /create endpoint (required)
        :param int page: Page of results (required)
        :param str apikey: Your api key (required)
        :return: RppCompetitorsList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['projectid', 'page', 'apikey']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_rpp_competitors_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'projectid' is set
        if ('projectid' not in params or
                params['projectid'] is None):
            raise ValueError("Missing the required parameter `projectid` when calling `get_rpp_competitors_list`")  # noqa: E501
        # verify the required parameter 'page' is set
        if ('page' not in params or
                params['page'] is None):
            raise ValueError("Missing the required parameter `page` when calling `get_rpp_competitors_list`")  # noqa: E501
        # verify the required parameter 'apikey' is set
        if ('apikey' not in params or
                params['apikey'] is None):
            raise ValueError("Missing the required parameter `apikey` when calling `get_rpp_competitors_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in params:
            path_params['projectid'] = params['projectid']  # noqa: E501
        if 'page' in params:
            path_params['page'] = params['page']  # noqa: E501

        query_params = []
        if 'apikey' in params:
            query_params.append(('apikey', params['apikey']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/result/ranktracker/competitors/{projectid}/{page}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RppCompetitorsList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_rpp_results(self, projectid, page, apikey, **kwargs):  # noqa: E501
        """Get results of your Rank Tracker project - dynamic  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_rpp_results(projectid, page, apikey, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int projectid: Project ID as returned by /create endpoint (required)
        :param int page: Page of results (required)
        :param str apikey: Your api key (required)
        :param date period_start: Get results starting from this date
        :param date period_end: Get results ending with this date
        :return: RppResultDynamic
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_rpp_results_with_http_info(projectid, page, apikey, **kwargs)  # noqa: E501
        else:
            (data) = self.get_rpp_results_with_http_info(projectid, page, apikey, **kwargs)  # noqa: E501
            return data

    def get_rpp_results_with_http_info(self, projectid, page, apikey, **kwargs):  # noqa: E501
        """Get results of your Rank Tracker project - dynamic  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_rpp_results_with_http_info(projectid, page, apikey, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int projectid: Project ID as returned by /create endpoint (required)
        :param int page: Page of results (required)
        :param str apikey: Your api key (required)
        :param date period_start: Get results starting from this date
        :param date period_end: Get results ending with this date
        :return: RppResultDynamic
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['projectid', 'page', 'apikey', 'period_start', 'period_end']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_rpp_results" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'projectid' is set
        if ('projectid' not in params or
                params['projectid'] is None):
            raise ValueError("Missing the required parameter `projectid` when calling `get_rpp_results`")  # noqa: E501
        # verify the required parameter 'page' is set
        if ('page' not in params or
                params['page'] is None):
            raise ValueError("Missing the required parameter `page` when calling `get_rpp_results`")  # noqa: E501
        # verify the required parameter 'apikey' is set
        if ('apikey' not in params or
                params['apikey'] is None):
            raise ValueError("Missing the required parameter `apikey` when calling `get_rpp_results`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in params:
            path_params['projectid'] = params['projectid']  # noqa: E501
        if 'page' in params:
            path_params['page'] = params['page']  # noqa: E501

        query_params = []
        if 'period_start' in params:
            query_params.append(('periodStart', params['period_start']))  # noqa: E501
        if 'period_end' in params:
            query_params.append(('periodEnd', params['period_end']))  # noqa: E501
        if 'apikey' in params:
            query_params.append(('apikey', params['apikey']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/result/ranktracker/dynamic/{projectid}/{page}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RppResultDynamic',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_rpp_results_compare_regions(self, projectid, page, apikey, **kwargs):  # noqa: E501
        """Get results of your Rank Tracker project - compare regions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_rpp_results_compare_regions(projectid, page, apikey, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int projectid: Project ID as returned by /create endpoint (required)
        :param int page: Page of results (required)
        :param str apikey: Your api key (required)
        :param date period_start: Get results starting from this date
        :param date period_end: Get results ending with this date
        :return: RppResultCompareRegions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_rpp_results_compare_regions_with_http_info(projectid, page, apikey, **kwargs)  # noqa: E501
        else:
            (data) = self.get_rpp_results_compare_regions_with_http_info(projectid, page, apikey, **kwargs)  # noqa: E501
            return data

    def get_rpp_results_compare_regions_with_http_info(self, projectid, page, apikey, **kwargs):  # noqa: E501
        """Get results of your Rank Tracker project - compare regions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_rpp_results_compare_regions_with_http_info(projectid, page, apikey, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int projectid: Project ID as returned by /create endpoint (required)
        :param int page: Page of results (required)
        :param str apikey: Your api key (required)
        :param date period_start: Get results starting from this date
        :param date period_end: Get results ending with this date
        :return: RppResultCompareRegions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['projectid', 'page', 'apikey', 'period_start', 'period_end']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_rpp_results_compare_regions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'projectid' is set
        if ('projectid' not in params or
                params['projectid'] is None):
            raise ValueError("Missing the required parameter `projectid` when calling `get_rpp_results_compare_regions`")  # noqa: E501
        # verify the required parameter 'page' is set
        if ('page' not in params or
                params['page'] is None):
            raise ValueError("Missing the required parameter `page` when calling `get_rpp_results_compare_regions`")  # noqa: E501
        # verify the required parameter 'apikey' is set
        if ('apikey' not in params or
                params['apikey'] is None):
            raise ValueError("Missing the required parameter `apikey` when calling `get_rpp_results_compare_regions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in params:
            path_params['projectid'] = params['projectid']  # noqa: E501
        if 'page' in params:
            path_params['page'] = params['page']  # noqa: E501

        query_params = []
        if 'period_start' in params:
            query_params.append(('periodStart', params['period_start']))  # noqa: E501
        if 'period_end' in params:
            query_params.append(('periodEnd', params['period_end']))  # noqa: E501
        if 'apikey' in params:
            query_params.append(('apikey', params['apikey']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/result/ranktracker/compare_regions/{projectid}/{page}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RppResultCompareRegions',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_rpp_results_competitors_leaders(self, projectid, page, apikey, **kwargs):  # noqa: E501
        """Get results of your Rank Tracker project - competitors leaders  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_rpp_results_competitors_leaders(projectid, page, apikey, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int projectid: Project ID as returned by /create endpoint (required)
        :param int page: Page of results (required)
        :param str apikey: Your api key (required)
        :param date period_start: Get results starting from this date
        :param date period_end: Get results ending with this date
        :return: RppResultCompetitorsLeaders
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_rpp_results_competitors_leaders_with_http_info(projectid, page, apikey, **kwargs)  # noqa: E501
        else:
            (data) = self.get_rpp_results_competitors_leaders_with_http_info(projectid, page, apikey, **kwargs)  # noqa: E501
            return data

    def get_rpp_results_competitors_leaders_with_http_info(self, projectid, page, apikey, **kwargs):  # noqa: E501
        """Get results of your Rank Tracker project - competitors leaders  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_rpp_results_competitors_leaders_with_http_info(projectid, page, apikey, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int projectid: Project ID as returned by /create endpoint (required)
        :param int page: Page of results (required)
        :param str apikey: Your api key (required)
        :param date period_start: Get results starting from this date
        :param date period_end: Get results ending with this date
        :return: RppResultCompetitorsLeaders
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['projectid', 'page', 'apikey', 'period_start', 'period_end']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_rpp_results_competitors_leaders" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'projectid' is set
        if ('projectid' not in params or
                params['projectid'] is None):
            raise ValueError("Missing the required parameter `projectid` when calling `get_rpp_results_competitors_leaders`")  # noqa: E501
        # verify the required parameter 'page' is set
        if ('page' not in params or
                params['page'] is None):
            raise ValueError("Missing the required parameter `page` when calling `get_rpp_results_competitors_leaders`")  # noqa: E501
        # verify the required parameter 'apikey' is set
        if ('apikey' not in params or
                params['apikey'] is None):
            raise ValueError("Missing the required parameter `apikey` when calling `get_rpp_results_competitors_leaders`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in params:
            path_params['projectid'] = params['projectid']  # noqa: E501
        if 'page' in params:
            path_params['page'] = params['page']  # noqa: E501

        query_params = []
        if 'period_start' in params:
            query_params.append(('periodStart', params['period_start']))  # noqa: E501
        if 'period_end' in params:
            query_params.append(('periodEnd', params['period_end']))  # noqa: E501
        if 'apikey' in params:
            query_params.append(('apikey', params['apikey']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/result/ranktracker/competitors_leaders/{projectid}/{page}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RppResultCompetitorsLeaders',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_rpp_results_competitors_positions(self, projectid, page, competitor, apikey, **kwargs):  # noqa: E501
        """Get results of your Rank Tracker project - competitors positions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_rpp_results_competitors_positions(projectid, page, competitor, apikey, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int projectid: Project ID as returned by /create endpoint (required)
        :param int page: Page of results (required)
        :param str competitor: Competitor domain - one from list returned by /result/ranktracker/competitors endpoint (required)
        :param str apikey: Your api key (required)
        :param date period_start: Get results starting from this date
        :param date period_end: Get results ending with this date
        :return: RppResultCompetitorsPositions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_rpp_results_competitors_positions_with_http_info(projectid, page, competitor, apikey, **kwargs)  # noqa: E501
        else:
            (data) = self.get_rpp_results_competitors_positions_with_http_info(projectid, page, competitor, apikey, **kwargs)  # noqa: E501
            return data

    def get_rpp_results_competitors_positions_with_http_info(self, projectid, page, competitor, apikey, **kwargs):  # noqa: E501
        """Get results of your Rank Tracker project - competitors positions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_rpp_results_competitors_positions_with_http_info(projectid, page, competitor, apikey, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int projectid: Project ID as returned by /create endpoint (required)
        :param int page: Page of results (required)
        :param str competitor: Competitor domain - one from list returned by /result/ranktracker/competitors endpoint (required)
        :param str apikey: Your api key (required)
        :param date period_start: Get results starting from this date
        :param date period_end: Get results ending with this date
        :return: RppResultCompetitorsPositions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['projectid', 'page', 'competitor', 'apikey', 'period_start', 'period_end']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_rpp_results_competitors_positions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'projectid' is set
        if ('projectid' not in params or
                params['projectid'] is None):
            raise ValueError("Missing the required parameter `projectid` when calling `get_rpp_results_competitors_positions`")  # noqa: E501
        # verify the required parameter 'page' is set
        if ('page' not in params or
                params['page'] is None):
            raise ValueError("Missing the required parameter `page` when calling `get_rpp_results_competitors_positions`")  # noqa: E501
        # verify the required parameter 'competitor' is set
        if ('competitor' not in params or
                params['competitor'] is None):
            raise ValueError("Missing the required parameter `competitor` when calling `get_rpp_results_competitors_positions`")  # noqa: E501
        # verify the required parameter 'apikey' is set
        if ('apikey' not in params or
                params['apikey'] is None):
            raise ValueError("Missing the required parameter `apikey` when calling `get_rpp_results_competitors_positions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in params:
            path_params['projectid'] = params['projectid']  # noqa: E501
        if 'page' in params:
            path_params['page'] = params['page']  # noqa: E501

        query_params = []
        if 'period_start' in params:
            query_params.append(('periodStart', params['period_start']))  # noqa: E501
        if 'period_end' in params:
            query_params.append(('periodEnd', params['period_end']))  # noqa: E501
        if 'competitor' in params:
            query_params.append(('competitor', params['competitor']))  # noqa: E501
        if 'apikey' in params:
            query_params.append(('apikey', params['apikey']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/result/ranktracker/competitors_positions/{projectid}/{page}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RppResultCompetitorsPositions',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_rpp_results_competitors_visibility(self, projectid, page, apikey, **kwargs):  # noqa: E501
        """Get results of your Rank Tracker project - competitors visibility  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_rpp_results_competitors_visibility(projectid, page, apikey, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int projectid: Project ID as returned by /create endpoint (required)
        :param int page: Page of results (required)
        :param str apikey: Your api key (required)
        :param date period_start: Get results starting from this date
        :param date period_end: Get results ending with this date
        :return: RppResultCompetitorsVisibility
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_rpp_results_competitors_visibility_with_http_info(projectid, page, apikey, **kwargs)  # noqa: E501
        else:
            (data) = self.get_rpp_results_competitors_visibility_with_http_info(projectid, page, apikey, **kwargs)  # noqa: E501
            return data

    def get_rpp_results_competitors_visibility_with_http_info(self, projectid, page, apikey, **kwargs):  # noqa: E501
        """Get results of your Rank Tracker project - competitors visibility  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_rpp_results_competitors_visibility_with_http_info(projectid, page, apikey, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int projectid: Project ID as returned by /create endpoint (required)
        :param int page: Page of results (required)
        :param str apikey: Your api key (required)
        :param date period_start: Get results starting from this date
        :param date period_end: Get results ending with this date
        :return: RppResultCompetitorsVisibility
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['projectid', 'page', 'apikey', 'period_start', 'period_end']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_rpp_results_competitors_visibility" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'projectid' is set
        if ('projectid' not in params or
                params['projectid'] is None):
            raise ValueError("Missing the required parameter `projectid` when calling `get_rpp_results_competitors_visibility`")  # noqa: E501
        # verify the required parameter 'page' is set
        if ('page' not in params or
                params['page'] is None):
            raise ValueError("Missing the required parameter `page` when calling `get_rpp_results_competitors_visibility`")  # noqa: E501
        # verify the required parameter 'apikey' is set
        if ('apikey' not in params or
                params['apikey'] is None):
            raise ValueError("Missing the required parameter `apikey` when calling `get_rpp_results_competitors_visibility`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in params:
            path_params['projectid'] = params['projectid']  # noqa: E501
        if 'page' in params:
            path_params['page'] = params['page']  # noqa: E501

        query_params = []
        if 'period_start' in params:
            query_params.append(('periodStart', params['period_start']))  # noqa: E501
        if 'period_end' in params:
            query_params.append(('periodEnd', params['period_end']))  # noqa: E501
        if 'apikey' in params:
            query_params.append(('apikey', params['apikey']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/result/ranktracker/competitors_visibility/{projectid}/{page}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RppResultCompetitorsVisibility',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_rpp_results_positions_history(self, projectid, page, apikey, **kwargs):  # noqa: E501
        """Get results of your Rank Tracker project - positions history  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_rpp_results_positions_history(projectid, page, apikey, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int projectid: Project ID as returned by /create endpoint (required)
        :param int page: Page of results (required)
        :param str apikey: Your api key (required)
        :param date period_start: Get results starting from this date
        :param date period_end: Get results ending with this date
        :return: RppResultPositionsHistory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_rpp_results_positions_history_with_http_info(projectid, page, apikey, **kwargs)  # noqa: E501
        else:
            (data) = self.get_rpp_results_positions_history_with_http_info(projectid, page, apikey, **kwargs)  # noqa: E501
            return data

    def get_rpp_results_positions_history_with_http_info(self, projectid, page, apikey, **kwargs):  # noqa: E501
        """Get results of your Rank Tracker project - positions history  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_rpp_results_positions_history_with_http_info(projectid, page, apikey, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int projectid: Project ID as returned by /create endpoint (required)
        :param int page: Page of results (required)
        :param str apikey: Your api key (required)
        :param date period_start: Get results starting from this date
        :param date period_end: Get results ending with this date
        :return: RppResultPositionsHistory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['projectid', 'page', 'apikey', 'period_start', 'period_end']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_rpp_results_positions_history" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'projectid' is set
        if ('projectid' not in params or
                params['projectid'] is None):
            raise ValueError("Missing the required parameter `projectid` when calling `get_rpp_results_positions_history`")  # noqa: E501
        # verify the required parameter 'page' is set
        if ('page' not in params or
                params['page'] is None):
            raise ValueError("Missing the required parameter `page` when calling `get_rpp_results_positions_history`")  # noqa: E501
        # verify the required parameter 'apikey' is set
        if ('apikey' not in params or
                params['apikey'] is None):
            raise ValueError("Missing the required parameter `apikey` when calling `get_rpp_results_positions_history`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in params:
            path_params['projectid'] = params['projectid']  # noqa: E501
        if 'page' in params:
            path_params['page'] = params['page']  # noqa: E501

        query_params = []
        if 'period_start' in params:
            query_params.append(('periodStart', params['period_start']))  # noqa: E501
        if 'period_end' in params:
            query_params.append(('periodEnd', params['period_end']))  # noqa: E501
        if 'apikey' in params:
            query_params.append(('apikey', params['apikey']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/result/ranktracker/positions_history/{projectid}/{page}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RppResultPositionsHistory',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_rpp_results_snippets_history(self, projectid, page, apikey, **kwargs):  # noqa: E501
        """Get results of your Rank Tracker project - snippets history  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_rpp_results_snippets_history(projectid, page, apikey, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int projectid: Project ID as returned by /create endpoint (required)
        :param int page: Page of results (required)
        :param str apikey: Your api key (required)
        :param date period_start: Get results starting from this date
        :param date period_end: Get results ending with this date
        :return: RppResultSnippetsHistory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_rpp_results_snippets_history_with_http_info(projectid, page, apikey, **kwargs)  # noqa: E501
        else:
            (data) = self.get_rpp_results_snippets_history_with_http_info(projectid, page, apikey, **kwargs)  # noqa: E501
            return data

    def get_rpp_results_snippets_history_with_http_info(self, projectid, page, apikey, **kwargs):  # noqa: E501
        """Get results of your Rank Tracker project - snippets history  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_rpp_results_snippets_history_with_http_info(projectid, page, apikey, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int projectid: Project ID as returned by /create endpoint (required)
        :param int page: Page of results (required)
        :param str apikey: Your api key (required)
        :param date period_start: Get results starting from this date
        :param date period_end: Get results ending with this date
        :return: RppResultSnippetsHistory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['projectid', 'page', 'apikey', 'period_start', 'period_end']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_rpp_results_snippets_history" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'projectid' is set
        if ('projectid' not in params or
                params['projectid'] is None):
            raise ValueError("Missing the required parameter `projectid` when calling `get_rpp_results_snippets_history`")  # noqa: E501
        # verify the required parameter 'page' is set
        if ('page' not in params or
                params['page'] is None):
            raise ValueError("Missing the required parameter `page` when calling `get_rpp_results_snippets_history`")  # noqa: E501
        # verify the required parameter 'apikey' is set
        if ('apikey' not in params or
                params['apikey'] is None):
            raise ValueError("Missing the required parameter `apikey` when calling `get_rpp_results_snippets_history`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in params:
            path_params['projectid'] = params['projectid']  # noqa: E501
        if 'page' in params:
            path_params['page'] = params['page']  # noqa: E501

        query_params = []
        if 'period_start' in params:
            query_params.append(('periodStart', params['period_start']))  # noqa: E501
        if 'period_end' in params:
            query_params.append(('periodEnd', params['period_end']))  # noqa: E501
        if 'apikey' in params:
            query_params.append(('apikey', params['apikey']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/result/ranktracker/snippets_history/{projectid}/{page}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RppResultSnippetsHistory',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_rpp_results_urls_history(self, projectid, page, apikey, **kwargs):  # noqa: E501
        """Get results of your Rank Tracker project - urls history  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_rpp_results_urls_history(projectid, page, apikey, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int projectid: Project ID as returned by /create endpoint (required)
        :param int page: Page of results (required)
        :param str apikey: Your api key (required)
        :param date period_start: Get results starting from this date
        :param date period_end: Get results ending with this date
        :return: RppResultUrlsHistory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_rpp_results_urls_history_with_http_info(projectid, page, apikey, **kwargs)  # noqa: E501
        else:
            (data) = self.get_rpp_results_urls_history_with_http_info(projectid, page, apikey, **kwargs)  # noqa: E501
            return data

    def get_rpp_results_urls_history_with_http_info(self, projectid, page, apikey, **kwargs):  # noqa: E501
        """Get results of your Rank Tracker project - urls history  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_rpp_results_urls_history_with_http_info(projectid, page, apikey, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int projectid: Project ID as returned by /create endpoint (required)
        :param int page: Page of results (required)
        :param str apikey: Your api key (required)
        :param date period_start: Get results starting from this date
        :param date period_end: Get results ending with this date
        :return: RppResultUrlsHistory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['projectid', 'page', 'apikey', 'period_start', 'period_end']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_rpp_results_urls_history" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'projectid' is set
        if ('projectid' not in params or
                params['projectid'] is None):
            raise ValueError("Missing the required parameter `projectid` when calling `get_rpp_results_urls_history`")  # noqa: E501
        # verify the required parameter 'page' is set
        if ('page' not in params or
                params['page'] is None):
            raise ValueError("Missing the required parameter `page` when calling `get_rpp_results_urls_history`")  # noqa: E501
        # verify the required parameter 'apikey' is set
        if ('apikey' not in params or
                params['apikey'] is None):
            raise ValueError("Missing the required parameter `apikey` when calling `get_rpp_results_urls_history`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in params:
            path_params['projectid'] = params['projectid']  # noqa: E501
        if 'page' in params:
            path_params['page'] = params['page']  # noqa: E501

        query_params = []
        if 'period_start' in params:
            query_params.append(('periodStart', params['period_start']))  # noqa: E501
        if 'period_end' in params:
            query_params.append(('periodEnd', params['period_end']))  # noqa: E501
        if 'apikey' in params:
            query_params.append(('apikey', params['apikey']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/result/ranktracker/urls_history/{projectid}/{page}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RppResultUrlsHistory',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_rpp_results_visibility(self, projectid, page, apikey, **kwargs):  # noqa: E501
        """Get results of your Rank Tracker project - visibility  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_rpp_results_visibility(projectid, page, apikey, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int projectid: Project ID as returned by /create endpoint (required)
        :param int page: Page of results (required)
        :param str apikey: Your api key (required)
        :param date period_start: Get results starting from this date
        :param date period_end: Get results ending with this date
        :return: RppResultVisibility
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_rpp_results_visibility_with_http_info(projectid, page, apikey, **kwargs)  # noqa: E501
        else:
            (data) = self.get_rpp_results_visibility_with_http_info(projectid, page, apikey, **kwargs)  # noqa: E501
            return data

    def get_rpp_results_visibility_with_http_info(self, projectid, page, apikey, **kwargs):  # noqa: E501
        """Get results of your Rank Tracker project - visibility  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_rpp_results_visibility_with_http_info(projectid, page, apikey, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int projectid: Project ID as returned by /create endpoint (required)
        :param int page: Page of results (required)
        :param str apikey: Your api key (required)
        :param date period_start: Get results starting from this date
        :param date period_end: Get results ending with this date
        :return: RppResultVisibility
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['projectid', 'page', 'apikey', 'period_start', 'period_end']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_rpp_results_visibility" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'projectid' is set
        if ('projectid' not in params or
                params['projectid'] is None):
            raise ValueError("Missing the required parameter `projectid` when calling `get_rpp_results_visibility`")  # noqa: E501
        # verify the required parameter 'page' is set
        if ('page' not in params or
                params['page'] is None):
            raise ValueError("Missing the required parameter `page` when calling `get_rpp_results_visibility`")  # noqa: E501
        # verify the required parameter 'apikey' is set
        if ('apikey' not in params or
                params['apikey'] is None):
            raise ValueError("Missing the required parameter `apikey` when calling `get_rpp_results_visibility`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in params:
            path_params['projectid'] = params['projectid']  # noqa: E501
        if 'page' in params:
            path_params['page'] = params['page']  # noqa: E501

        query_params = []
        if 'period_start' in params:
            query_params.append(('periodStart', params['period_start']))  # noqa: E501
        if 'period_end' in params:
            query_params.append(('periodEnd', params['period_end']))  # noqa: E501
        if 'apikey' in params:
            query_params.append(('apikey', params['apikey']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/result/ranktracker/visibility/{projectid}/{page}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RppResultVisibility',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
